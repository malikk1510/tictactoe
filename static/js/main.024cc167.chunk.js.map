{"version":3,"sources":["Icons.js","Game.js","App.js","index.js"],"names":["Icons","props","name","className","cardArray","Array","fill","Game","useState","isCross","setIsCross","winMessage","setWinMessage","Container","position","color","Row","Col","md","Button","block","onClick","map","value","indexNumber","Card","key","id","toast","error","console","log","changeCardArray","CardBody","App","ReactDOM","render","document","getElementById"],"mappings":"yPAgBeA,EAbD,SAACC,GAEb,OAAQA,EAAMC,MAEZ,IAAK,SACH,OAAO,kBAAC,IAAD,CAAaC,UAAU,SAChC,IAAK,QACH,OAAO,kBAAC,IAAD,CAASA,UAAU,SAC5B,QACE,OAAO,kBAAC,IAAD,CAAOA,UAAU,W,gDCL1BC,G,MAAY,IAAIC,MAAM,GAAGC,KAAK,UA2HnBC,MAzHf,WAAiB,IAAD,EACgBC,oBAAS,GADzB,mBACPC,EADO,KACEC,EADF,OAEsBF,mBAAS,IAF/B,mBAEPG,EAFO,KAEKC,EAFL,KAwEd,OACE,oCACE,kBAACC,EAAA,EAAD,CAAWV,UAAU,cACnB,kBAAC,IAAD,CAAgBW,SAAS,gBAAgBC,MAAM,UAC/C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGf,UAAU,eACJ,KAAfQ,EACC,yBAAKR,UAAU,aACb,wBAAIA,UAAU,0CACXQ,GAEH,kBAACQ,EAAA,EAAD,CACEJ,MAAM,yBACNK,OAAK,EACLC,QAlFG,WACjBX,GAAW,GACXE,EAAc,IACdR,EAAUE,KAAK,WA4EH,gBASF,wBAAIH,UAAU,6CACXM,EAAU,SAAW,QADxB,SAIF,yBAAKN,UAAU,QACZC,EAAUkB,KAAI,SAACC,EAAOC,GACrB,OACE,kBAACC,EAAA,EAAD,CACEC,IAAKF,EACLG,GAAIH,EACJH,QAAS,YAxCH,SAACG,GACQ,UAA3BpB,EAAUoB,IACZpB,EAAUoB,GAAef,EAAU,SAAW,QAC9CC,GAAYD,IAEZmB,IAAMC,MAAM,oBAAsBzB,EAAUoB,IAE9CM,QAAQC,IAAI3B,EAAUoB,IAkCJQ,CAAgBR,GA3FhCpB,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,IAEVQ,EAAcR,EAAU,GAAK,WAiDf,kBAAC6B,EAAA,EAAD,CAAU9B,UAAU,OAClB,kBAAC,EAAD,CAAOD,KAAMqB,eChHpBW,EAFH,kBAAM,kBAAC,EAAD,OCElBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.024cc167.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FaTimes, FaRegCircle, FaPen } from \"react-icons/fa\";\r\n\r\nconst Icons = (props) => {\r\n   \r\n  switch (props.name) {\r\n     \r\n    case \"circle\":\r\n      return <FaRegCircle className=\"icon\" />;\r\n    case \"cross\":\r\n      return <FaTimes className=\"icon\" />;\r\n    default:\r\n      return <FaPen className=\"icon\" />;\r\n  }\r\n};\r\n\r\nexport default Icons;\r\n","import React, { useState } from \"react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Icons from \"./Icons\";\r\nimport { Card, CardBody, Container, Button, Col, Row } from \"reactstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n//\r\nlet cardArray = new Array(9).fill(\"empty\");\r\n\r\nfunction Game() {\r\n  const [isCross, setIsCross] = useState(false);\r\n  const [winMessage, setWinMessage] = useState(\"\");\r\n\r\n  const reloadGame = () => {\r\n    setIsCross(false);\r\n    setWinMessage(\"\");\r\n    cardArray.fill(\"empty\");\r\n  };\r\n\r\n  const checkWinner = () => {\r\n    if (\r\n      cardArray[0] === cardArray[1] &&\r\n      cardArray[0] === cardArray[2] &&\r\n      cardArray[0] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${cardArray[0]} Won`);\r\n    } else if (\r\n      cardArray[3] === cardArray[4] &&\r\n      cardArray[3] === cardArray[5] &&\r\n      cardArray[3] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${cardArray[3]} Won`);\r\n    } else if (\r\n      cardArray[6] === cardArray[7] &&\r\n      cardArray[6] === cardArray[8] &&\r\n      cardArray[6] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${cardArray[6]} Won`);\r\n    } else if (\r\n      cardArray[0] === cardArray[3] &&\r\n      cardArray[0] === cardArray[6] &&\r\n      cardArray[0] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${cardArray[0]} Won`);\r\n    } else if (\r\n      cardArray[1] === cardArray[4] &&\r\n      cardArray[1] === cardArray[7] &&\r\n      cardArray[1] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${cardArray[1]} Won`);\r\n    } else if (\r\n      cardArray[2] === cardArray[5] &&\r\n      cardArray[2] === cardArray[8] &&\r\n      cardArray[2] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${cardArray[2]} Won`);\r\n    } else if (\r\n      cardArray[0] === cardArray[4] &&\r\n      cardArray[0] === cardArray[8] &&\r\n      cardArray[0] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${cardArray[0]} Won`);\r\n    } else if (\r\n      cardArray[2] === cardArray[4] &&\r\n      cardArray[2] === cardArray[6] &&\r\n      cardArray[2] !== \"empty\"\r\n    ) {\r\n      setWinMessage(cardArray[2] + \" Wins\");\r\n    }\r\n  };\r\n\r\n  const changeCardArray = (indexNumber) => {\r\n    if (cardArray[indexNumber] === \"empty\") {\r\n      cardArray[indexNumber] = isCross ? \"circle\" : \"cross\";\r\n      setIsCross(!isCross);\r\n    } else {\r\n      toast.error(\"Already filled ! \" + cardArray[indexNumber]);\r\n    }\r\n    console.log(cardArray[indexNumber]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"p-5 first1\">\r\n        <ToastContainer position=\"bottom-center\" color=\"black\" />\r\n        <Row>\r\n          <Col md={6} className=\"offset-md-3\">\r\n            {winMessage !== \"\" ? (\r\n              <div className=\"mb-2 mt-2\">\r\n                <h1 className=\" text-uppercase text-center text-info \">\r\n                  {winMessage}\r\n                </h1>\r\n                <Button\r\n                  color=\"success text-uppercase\"\r\n                  block\r\n                  onClick={reloadGame}\r\n                >\r\n                  Reload game\r\n                </Button>\r\n              </div>\r\n            ) : (\r\n              <h1 className=\" text-warning text-uppercase text-center \">\r\n                {isCross ? \"Circle\" : \"Cross\"} turn\r\n              </h1>\r\n            )}\r\n            <div className=\"grid\">\r\n              {cardArray.map((value, indexNumber) => {\r\n                return (\r\n                  <Card\r\n                    key={indexNumber}\r\n                    id={indexNumber}\r\n                    onClick={() => {\r\n                      changeCardArray(indexNumber);\r\n                      checkWinner();\r\n                    }}\r\n                  >\r\n                    <CardBody className=\"box\">\r\n                      <Icons name={value} />\r\n                    </CardBody>\r\n                  </Card>\r\n                );\r\n              })}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport Game from \"./Game\";\n\nconst App = () => <Game />;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}